# Native version of the pi calculation
function calculatePi(rounds) {
    limit = 2 * rounds + 1;
    pi = 0;

    for (i = 1 - 2 * rounds; i <= limit; i += 4) {
        pi += 1.0 / i;
    }
    pi *= 4;
    return pi;
}

void function main() {
    # Calculate pi using the native version
    start_time = clock();
    pi = calculatePi(10000000);
    native_time = clock() - start_time;
    println("Native:\nPi: ", pi, " Time: ", native_time, "s\n");

    # Calculate pi using the C version with the same backend data structure
    start_time = clock();
    pi = C_CalculatePi_2(10000000);
    cj_accelerated = clock() - start_time;
    println("cj_accelerated:\nPi: ", pi, " Time: ", cj_accelerated, "s");
    println("Speedup: ", native_time / cj_accelerated, "\n");

    # Calculate pi using the C version
    start_time = clock();
    pi = C_CalculatePi(10000000);
    c_time = clock() - start_time;
    println("C:\nPi: ", pi, " Time: ", c_time, "s");
    println("Speedup: ", native_time / c_time, "\n");
}
